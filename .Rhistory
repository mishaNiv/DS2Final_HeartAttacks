title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 1
)
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 2
)
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.5
)
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.75
)
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.75
tl.col = "brown4"
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.75,
tl.col = "brown4"
)
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.75,
tl.col = "darkred"
)
source("C:/Users/mnivota/OneDrive - Eastside Preparatory School/12th Grade/Data Sci 2/Final/DS2Final_HeartAttacks/app.R", echo=TRUE)
runApp()
library(caret)
library(corrplot)
heart <- read.csv("heart.csv")
heart
summary(heart)
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.75,
tl.col = "darkred"
)
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
load("C:/Users/mnivota/OneDrive - Eastside Preparatory School/12th Grade/Data Sci 2/Final/DS2Final_HeartAttacks/.RData")
shiny::runApp()
library(caret)
library(corrplot)
heart <- read.csv("heart.csv")
heart
summary(heart)
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.75,
tl.col = "darkred"
)
# set seed
set.seed(904)
# create row index; 80% split
tIndex <- sample(1:nrow(heart), 0.8*nrow(heart))
# use index to split intro train/test
trainD <- heart[tIndex, ]
testD <- heart[-tIndex, ]
library(randomForest)
heart.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE, proximity=TRUE)
confusionMatrix(data=predict(heart.rf, testD), reference=as.factor(testD$output))
mvar <- c(1:13)
nvar <- seq(50, 1000, 50)
bestmod <- heart.rf
bestval <- 0
for (val in mvar) {
mvar1 <- mvar[val]
for (val in nvar) {
newheart <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE, proximity=TRUE, mtry=mvar1, ntrees=nvar)
conf <- confusionMatrix(data=predict(newheart, testD), reference=as.factor(testD$output))
if(conf$overall['Accuracy'] > bestval) {
bestmod <- newheart
bestval <- conf$overall['Accuracy']
}
}
}
bestmod
bestval
bestmod
bestval
bestmod
bestval
mvar1
nvar
bestmod
bestval
str = "Mvar is: " + mvar1
bestmod
(bestval)
cat("Mvar is: ", mvar1)
cat("Nvar is", nvar)
bestmod
(bestval)
cat("Mvar is: ", mvar1)
cat("Nvar is", nvar)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 13, ntrees=1000)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
cat("Nvar is", nvar)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 13, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
cat("Nvar is", nvar)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 13, ntrees=100)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
cat("Nvar is", nvar)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 13, ntrees=600)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
cat("Nvar is", nvar)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 13, ntrees=450)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
cat("Nvar is", nvar)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 13, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 13, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 13, ntrees=600)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 13, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 10, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 8, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 1, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 3, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 4, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 5, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
bestmod
(bestval)
cat("Mvar is: ", mvar1)
test.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE,
proximity=TRUE, mtry = 2, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(test.rf, testD), reference=as.factor(testD$output))
runApp()
runApp()
bestmod
bestval
mvar <- c(1:13)
nvar <- seq(50, 1000, 50)
bestmod <- heart.rf
bestval <- 0
for (val in mvar) {
mvar1 <- mvar[val]
for (val in nvar) {
newheart <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE, proximity=TRUE, mtry=mvar1, ntrees=nvar)
conf <- confusionMatrix(data=predict(newheart, testD), reference=as.factor(testD$output))
if(conf$overall['Accuracy'] > bestval) {
bestmod <- newheart
(mvar1)
(nvar)
(bestval <- conf$overall['Accuracy'])
}
}
}
mvar <- c(1:13)
nvar <- seq(50, 1000, 50)
bestmod <- heart.rf
bestval <- 0
for (val in mvar) {
mvar1 <- mvar[val]
for (val in nvar) {
newheart <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE, proximity=TRUE, mtry=mvar1, ntrees=nvar)
conf <- confusionMatrix(data=predict(newheart, testD), reference=as.factor(testD$output))
if(conf$overall['Accuracy'] > bestval) {
bestmod <- newheart
cat(mvar1)
cat(nvar)
cat(bestval <- conf$overall['Accuracy'])
}
}
}
mvar <- c(1:13)
nvar <- seq(50, 1000, 50)
bestmod <- heart.rf
bestval <- 0
for (val in mvar) {
mvar1 <- mvar[val]
for (val in nvar) {
newheart <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE, proximity=TRUE, mtry=mvar1, ntrees=nvar)
conf <- confusionMatrix(data=predict(newheart, testD), reference=as.factor(testD$output))
if(conf$overall['Accuracy'] > bestval) {
bestmod <- newheart
cat("Mvar is: ", mvar1)
cat("Nvar is: ", nvar)
bestval <- conf$overall['Accuracy']
cat("Accuracy is: ", bestval)
}
}
}
bestmod
bestval
testheart <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE, proximity=TRUE, mtry=1, ntrees=500)
confusionMatrix(data=predict(bestmod, testD), reference=as.factor(testD$output))
confusionMatrix(data=predict(testheart, testD), reference=as.factor(testD$output))
runApp()
shiny::runApp()
ggplot(heart, aes(x=sex)) +
geom_histogram(aes(y=..density..), color="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(heart, aes(x=sex)) +
geom_histogram(aes(y=..density..), color="black", fill="white"))
ggplot(heart, aes(x=sex)) +
geom_histogram(aes(y=..density..), color="black", fill="white")
ggplot(heart, aes(x=age)) +
geom_histogram(aes(y=..density..), color="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.75,
tl.col = "darkred"
)
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),addrect = 4,
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.75,
tl.col = "darkred"
)
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),rect.lwd = 5,
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.75,
tl.col = "darkred"
)
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),number.cex = 0.75,
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.75,
tl.col = "darkred"
)
corrplot(cor(heart), method = "shade",
title = "Correlation of Heart Data",
col = colorRampPalette(c("white","lightsalmon","brown2"))(100),
tl.pos = "l",
mar = c(2, 1, 3, 1),
tl.cex = 0.75,
tl.col = "darkred"
)
ggplot(heart, aes(x=sex)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=age)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(heart, aes(x=sex)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=age)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="#de8585")
ggplot(heart, aes(x=sex)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=age)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="#c44f4f")
ggplot(heart, aes(x=sex)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=age)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=sex)) +
geom_barplot(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=sex)) +
geom_bar(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=sex)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=age)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=sex)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=age)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=cp)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=restbps)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=chol)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=fbs)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=restecg)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=maxrate)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=exng)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=oldpeak)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=slp)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=majvessel)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=thall)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=output)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=sex)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=age)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=cp)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=restbps)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=chol)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=fbs)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=restecg)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=maxrate)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=exng)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=oldpeak)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")+
geom_density(alpha=.2, fill="brown1")
ggplot(heart, aes(x=slp)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=majvessel)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=thall)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
ggplot(heart, aes(x=output)) +
geom_histogram(aes(y=..density..), color="black", fill="lightsalmon")
bestmod
heart <- read.csv("heart.csv")
heart
# set seed
set.seed(904)
# create row index; 80% split
tIndex <- sample(1:nrow(heart), 0.8*nrow(heart))
# use index to split intro train/test
trainD <- heart[tIndex, ]
testD <- heart[-tIndex, ]
# set seed
set.seed(904)
# create row index; 80% split
tIndex <- sample(1:nrow(heart), 0.8*nrow(heart))
# use index to split intro train/test
trainD <- heart[tIndex, ]
testD <- heart[-tIndex, ]
heart.rf <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE, proximity=TRUE)
confusionMatrix(data=predict(heart.rf, testD), reference=as.factor(testD$output))
mvar <- c(1:13)
nvar <- seq(25, 1000, 25)
bestmod <- heart.rf
bestval <- 0
for (val in mvar) {
mvar1 <- mvar[val]
for (val in nvar) {
newheart <- randomForest(as.factor(output) ~ ., data=trainD, importance=TRUE, proximity=TRUE, mtry=mvar1, ntrees=nvar)
conf <- confusionMatrix(data=predict(newheart, testD), reference=as.factor(testD$output))
if(conf$overall['Accuracy'] > bestval) {
bestmod <- newheart
bestval <- conf$overall['Accuracy']
}
}
}
bestmod
bestval
runApp()
summary(heart)
summary(heart)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
